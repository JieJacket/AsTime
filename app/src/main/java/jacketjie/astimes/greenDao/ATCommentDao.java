package jacketjie.astimes.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jacketjie.astimes.greenDao.ATComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATCOMMENT.
*/
public class ATCommentDao extends AbstractDao<ATComment, Long> {

    public static final String TABLENAME = "ATCOMMENT";

    /**
     * Properties of entity ATComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommentId = new Property(1, String.class, "commentId", false, "COMMENT_ID");
        public final static Property CommentUserId = new Property(2, String.class, "commentUserId", false, "COMMENT_USER_ID");
        public final static Property CommentDate = new Property(3, String.class, "commentDate", false, "COMMENT_DATE");
        public final static Property CommentDetail = new Property(4, String.class, "commentDetail", false, "COMMENT_DETAIL");
        public final static Property CommentHasSubmit = new Property(5, Boolean.class, "commentHasSubmit", false, "COMMENT_HAS_SUBMIT");
        public final static Property WeiYuId = new Property(6, String.class, "weiYuId", false, "WEI_YU_ID");
    };


    public ATCommentDao(DaoConfig config) {
        super(config);
    }
    
    public ATCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATCOMMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COMMENT_ID' TEXT NOT NULL UNIQUE ," + // 1: commentId
                "'COMMENT_USER_ID' TEXT," + // 2: commentUserId
                "'COMMENT_DATE' TEXT," + // 3: commentDate
                "'COMMENT_DETAIL' TEXT," + // 4: commentDetail
                "'COMMENT_HAS_SUBMIT' INTEGER," + // 5: commentHasSubmit
                "'WEI_YU_ID' TEXT NOT NULL );"); // 6: weiYuId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATCOMMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ATComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCommentId());
 
        String commentUserId = entity.getCommentUserId();
        if (commentUserId != null) {
            stmt.bindString(3, commentUserId);
        }
 
        String commentDate = entity.getCommentDate();
        if (commentDate != null) {
            stmt.bindString(4, commentDate);
        }
 
        String commentDetail = entity.getCommentDetail();
        if (commentDetail != null) {
            stmt.bindString(5, commentDetail);
        }
 
        Boolean commentHasSubmit = entity.getCommentHasSubmit();
        if (commentHasSubmit != null) {
            stmt.bindLong(6, commentHasSubmit ? 1l: 0l);
        }
        stmt.bindString(7, entity.getWeiYuId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ATComment readEntity(Cursor cursor, int offset) {
        ATComment entity = new ATComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // commentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commentUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commentDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commentDetail
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // commentHasSubmit
            cursor.getString(offset + 6) // weiYuId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ATComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommentId(cursor.getString(offset + 1));
        entity.setCommentUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommentDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentDetail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommentHasSubmit(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setWeiYuId(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ATComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ATComment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
