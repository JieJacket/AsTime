package jacketjie.astimes.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jacketjie.astimes.greenDao.ATUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATUSER.
*/
public class ATUserDao extends AbstractDao<ATUser, Long> {

    public static final String TABLENAME = "ATUSER";

    /**
     * Properties of entity ATUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserPassword = new Property(3, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserPhonenumber = new Property(4, String.class, "userPhonenumber", false, "USER_PHONENUMBER");
        public final static Property UserNickName = new Property(5, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property UserIcon = new Property(6, String.class, "userIcon", false, "USER_ICON");
        public final static Property UserSignature = new Property(7, String.class, "userSignature", false, "USER_SIGNATURE");
        public final static Property UserGender = new Property(8, Integer.class, "userGender", false, "USER_GENDER");
        public final static Property IsActiveUser = new Property(9, Boolean.class, "isActiveUser", false, "IS_ACTIVE_USER");
        public final static Property UpdateTime = new Property(10, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    };


    public ATUserDao(DaoConfig config) {
        super(config);
    }
    
    public ATUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATUSER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL UNIQUE ," + // 1: userId
                "'USER_NAME' TEXT NOT NULL ," + // 2: userName
                "'USER_PASSWORD' TEXT," + // 3: userPassword
                "'USER_PHONENUMBER' TEXT," + // 4: userPhonenumber
                "'USER_NICK_NAME' TEXT NOT NULL UNIQUE ," + // 5: userNickName
                "'USER_ICON' TEXT," + // 6: userIcon
                "'USER_SIGNATURE' TEXT," + // 7: userSignature
                "'USER_GENDER' INTEGER," + // 8: userGender
                "'IS_ACTIVE_USER' INTEGER," + // 9: isActiveUser
                "'UPDATE_TIME' INTEGER);"); // 10: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATUSER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ATUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getUserName());
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(4, userPassword);
        }
 
        String userPhonenumber = entity.getUserPhonenumber();
        if (userPhonenumber != null) {
            stmt.bindString(5, userPhonenumber);
        }
        stmt.bindString(6, entity.getUserNickName());
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(7, userIcon);
        }
 
        String userSignature = entity.getUserSignature();
        if (userSignature != null) {
            stmt.bindString(8, userSignature);
        }
 
        Integer userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindLong(9, userGender);
        }
 
        Boolean isActiveUser = entity.getIsActiveUser();
        if (isActiveUser != null) {
            stmt.bindLong(10, isActiveUser ? 1l: 0l);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ATUser readEntity(Cursor cursor, int offset) {
        ATUser entity = new ATUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userPhonenumber
            cursor.getString(offset + 5), // userNickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userIcon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userSignature
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // userGender
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isActiveUser
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ATUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setUserName(cursor.getString(offset + 2));
        entity.setUserPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPhonenumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserNickName(cursor.getString(offset + 5));
        entity.setUserIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserSignature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserGender(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsActiveUser(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ATUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ATUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
